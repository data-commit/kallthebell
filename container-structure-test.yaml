schemaVersion: '2.0.0'

# Test metadata
metadata:
  name: "Application Container Structure Test"
  description: "Verification of container structure and content"

# File existence tests
fileExistenceTests:
  - name: "Verify application files"
    path: "/app"
    shouldExist: true
    permissions: "drwxr-xr-x"
    
  - name: "Check package.json exists"
    path: "/app/package.json"
    shouldExist: true
    permissions: "-rw-r--r--"

  - name: "Check node_modules"
    path: "/app/node_modules"
    shouldExist: true
    permissions: "drwxr-xr-x"

# File content tests
fileContentTests:
  - name: "Verify package.json content"
    path: "/app/package.json"
    expectedContents: ['.*"name":.*', '.*"version":.*']
    matchType: "regexp"

# Command tests
commandTests:
  - name: "Check Node.js installation"
    command: "node"
    args: ["--version"]
    expectedOutput: ["v.*"]
    matchType: "regexp"

  - name: "Check npm installation"
    command: "npm"
    args: ["--version"]
    expectedOutput: [".*[0-9]+.[0-9]+.[0-9]+.*"]
    matchType: "regexp"

  - name: "Check working directory"
    command: "pwd"
    expectedOutput: ["/app"]

  # Test application specific commands
  - name: "Test application health check"
    command: "curl"
    args: ["--fail", "localhost:3000/health"]
    expectedOutput: [".*status.*ok.*"]
    matchType: "regexp"
    setup: [["sleep", "5"]]  # Wait for application to start

# Metadata tests
metadataTest:
  env:
    - key: "NODE_ENV"
      value: "production"
    - key: "PORT"
      value: "3000"
  
  exposedPorts: ["3000"]
  
  volumes: ["/app/data"]
  
  workdir: "/app"
  
  labels:
    - key: "maintainer"
      value: "your-email@example.com"
    - key: "version"
      value: ".*"
      matchType: "regexp"

# License tests
licenseTests:
  - name: "Check license file exists"
    path: "/app/LICENSE"
    shouldExist: true
    permissions: "-rw-r--r--"

# Size tests
globalTests:
  - name: "Container Size Test"
    maxImageSize: 1000000000  # Maximum size in bytes (1GB)